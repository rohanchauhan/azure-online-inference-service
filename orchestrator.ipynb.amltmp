{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Steps\r\n",
        "\r\n",
        "code/train\r\n",
        "\r\n",
        "1. Write train.py\r\n",
        "2. Write script_run_config.py\r\n",
        "3. Write training_environment.yml\r\n",
        "\r\n",
        "code/deploy\r\n",
        "\r\n",
        "1. Write scoring_script.py\r\n",
        "2. Write deployment_script.py\r\n",
        "3. Write inference_environment.yml\r\n",
        "\r\n",
        "code/test\r\n",
        "\r\n",
        "1. Write test_using_sdk.py\r\n",
        "2. Write test_using_http.py\r\n"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train Folder"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile './code/train/train.py'\r\n",
        "\r\n",
        "from azureml.core import Run, Experiment, Model, Datastore, Workspace\r\n",
        "import pandas as pd \r\n",
        "import numpy as np\r\n",
        "import joblib\r\n",
        "from sklearn.model_selection import train_test_split \r\n",
        "from sklearn import linear_model\r\n",
        "from sklearn.metrics import mean_squared_error, r2_score\r\n",
        "import argparse\r\n",
        "import os\r\n",
        "\r\n",
        "# Get dataset as argument\r\n",
        "parser = argparse.ArgumentParser()\r\n",
        "parser.add_argument(\"--input-data\", type=str, dest='dataset_id', help='training dataset')\r\n",
        "args=parser.parse_args()\r\n",
        "\r\n",
        "# Get the experiment run context\r\n",
        "run = Run.get_context()\r\n",
        "\r\n",
        "print('Loading Dataset')\r\n",
        "# Load Dataset\r\n",
        "wine_quality = run.input_datasets['training_data'].to_pandas_dataframe()\r\n",
        "X, y = wine_quality.drop('quality', axis=1), wine_quality.quality\r\n",
        "\r\n",
        "# Split data into training set and test set\r\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\r\n",
        "\r\n",
        "# Write X_test, y_test for later on testing service\r\n",
        "os.makedirs('outputs', exist_ok=True)\r\n",
        "X_test.to_csv('outputs/X_test.csv',index=False, index_label=False)\r\n",
        "y_test.to_csv('outputs/y_test.csv',index=False, index_label=False)\r\n",
        "\r\n",
        "# Upload test data to datastore\r\n",
        "ws = Workspace.from_config()\r\n",
        "default_ds = ws.get_default_datastore()\r\n",
        "default_ds.upload_files(\r\n",
        "    files=['outputs/X_test.csv','outputs/y_test.csv'],\r\n",
        "    target_path='wine-quality/test-data/',\r\n",
        "    overwrite=True,\r\n",
        "    show_progress=True)\r\n",
        "\r\n",
        "print('Training Model')\r\n",
        "# Train Model\r\n",
        "regression_model = linear_model.LinearRegression().fit(X_train,y_train)\r\n",
        "\r\n",
        "# Mean Squared Error and R Squared Score\r\n",
        "y_pred = regression_model.predict(X_test)\r\n",
        "mse = mean_squared_error(y_test, y_pred)\r\n",
        "r2 = r2_score(y_test, y_pred)\r\n",
        "\r\n",
        "# Print & Log metrics\r\n",
        "run.log('MSE', mse)\r\n",
        "print(\"Mean Squared Error: {:.2f}\".format(mse))\r\n",
        "\r\n",
        "run.log('R2', r2)\r\n",
        "print(\"R Squared : {:.2f}\".format(r2))\r\n",
        "\r\n",
        "print('Storing Model')\r\n",
        "# Store the model\r\n",
        "joblib.dump(value=regression_model, filename='outputs/regression_model.pkl')\r\n",
        "\r\n",
        "# Complete the run\r\n",
        "run.complete()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting ./code/train/train.py\n"
          ]
        }
      ],
      "execution_count": 1,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile './code/train/training_environment.yml'\r\n",
        "name: training_environment\r\n",
        "dependencies:\r\n",
        "- python=3.6.2\r\n",
        "- scikit-learn\r\n",
        "- pip\r\n",
        "- pip:\r\n",
        "  - azureml-defaults"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting ./code/train/training_environment.yml\n"
          ]
        }
      ],
      "execution_count": 2,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile './code/train/script_run_config.py'\r\n",
        "\r\n",
        "from azureml.core import Workspace, Experiment, ScriptRunConfig, Environment, Dataset\r\n",
        "from azureml.core.compute import ComputeTarget, AmlCompute\r\n",
        "from azureml.core.compute_target import ComputeTargetException\r\n",
        "from azureml.core.conda_dependencies import CondaDependencies\r\n",
        "\r\n",
        "# Get workspace\r\n",
        "ws = Workspace.from_config()\r\n",
        "\r\n",
        "# Create environment\r\n",
        "env = Environment.from_conda_specification(\"wine_train_env\", 'training_environment.yml')\r\n",
        "\r\n",
        "# Get the default datastore\r\n",
        "default_ds = ws.get_default_datastore()\r\n",
        "\r\n",
        "dataset_name = 'wine quality dataset'\r\n",
        "if dataset_name not in ws.datasets:\r\n",
        "    default_ds.upload_files(\r\n",
        "        files=['../../data/winequality-white.csv'],\r\n",
        "        target_path='wine-quality/data/',\r\n",
        "        overwrite=True,\r\n",
        "        show_progress=True)\r\n",
        "    \r\n",
        "    tab_dataset = Dataset.Tabular.from_delimited_files(\r\n",
        "        path=(default_ds,'wine-quality/data/*.csv'),\r\n",
        "        separator=';')\r\n",
        "        \r\n",
        "    try:\r\n",
        "        tab_dataset = tab_dataset.register(workspace=ws, \r\n",
        "                                name=dataset_name,\r\n",
        "                                description='wine quality data from UCI',\r\n",
        "                                tags = {'format':'CSV'},\r\n",
        "                                create_new_version=True)\r\n",
        "        print('Dataset registered.')\r\n",
        "    except Exception as ex:\r\n",
        "        print(ex)\r\n",
        "else:\r\n",
        "    tab_dataset = Dataset.get_by_name(ws, dataset_name)\r\n",
        "    print('Dataset already registered.')\r\n",
        "\r\n",
        "# Create script config\r\n",
        "script_config = ScriptRunConfig(\r\n",
        "    source_directory='.',\r\n",
        "    script='train.py',\r\n",
        "    arguments=['--input-data',tab_dataset.as_named_input('training_data')],\r\n",
        "    environment=env)\r\n",
        "\r\n",
        "print('Starting Experiment')\r\n",
        "# Run experiment\r\n",
        "experiment_name='wine-regression-experiment'\r\n",
        "experiment = Experiment(workspace=ws, name=experiment_name)\r\n",
        "run = experiment.submit(config=script_config)\r\n",
        "\r\n",
        "# Wait for experiment to complete\r\n",
        "run.wait_for_completion()\r\n",
        "print('Experiment ended')\r\n",
        "\r\n",
        "\r\n",
        "# Register the model\r\n",
        "run.register_model(\r\n",
        "    model_path='outputs/regression_model.pkl',\r\n",
        "    model_name='wine_regression_model',\r\n",
        "    tags={'Training context':'Realtime Inference Pipeline'})\r\n",
        "print('Model Registered')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting ./code/train/script_run_config.py\n"
          ]
        }
      ],
      "execution_count": 3,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Deploy Folder"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile './code/deploy/scoring_script.py'\r\n",
        "\r\n",
        "import json\r\n",
        "import joblib\r\n",
        "import numpy as np\r\n",
        "from azureml.core import Workspace\r\n",
        "from azureml.core.model import Model\r\n",
        "\r\n",
        "# Loads the model\r\n",
        "def init():\r\n",
        "    global model\r\n",
        "    model_path = Model.get_model_path('wine_regression_model')\r\n",
        "    model = joblib.load(model_path)\r\n",
        "    print('Model Loaded')\r\n",
        "\r\n",
        "# Uses the model to predict new data\r\n",
        "def run(new_data):\r\n",
        "    data = np.array(json.loads(new_data)['data'])\r\n",
        "    predictions = model.predict(np.array(data))\r\n",
        "    return json.dumps(predictions.tolist())"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting ./code/deploy/scoring_script.py\n"
          ]
        }
      ],
      "execution_count": 4,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile './code/deploy/inference_environment.yml'\r\n",
        "name: inference_environment\r\n",
        "dependencies:\r\n",
        "- python=3.6.2\r\n",
        "- scikit-learn\r\n",
        "- pip\r\n",
        "- pip:\r\n",
        "  - azureml-defaults"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting ./code/deploy/inference_environment.yml\n"
          ]
        }
      ],
      "execution_count": 5,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile './code/deploy/deployment_script.py'\r\n",
        "from azureml.core import Workspace, Model\r\n",
        "from azureml.core.model import InferenceConfig\r\n",
        "from azureml.core.webservice import AciWebservice\r\n",
        "\r\n",
        "# Get workspace\r\n",
        "ws = Workspace.from_config()\r\n",
        "\r\n",
        "# Create Inference config\r\n",
        "inference_config = InferenceConfig(\r\n",
        "    runtime='python',\r\n",
        "    entry_script='scoring_script.py',\r\n",
        "    conda_file='inference_environment.yml')\r\n",
        "\r\n",
        "# Create deployment target\r\n",
        "deployment_config = AciWebservice.deploy_configuration(cpu_cores = 1,\r\n",
        "    memory_gb = 1)\r\n",
        "\r\n",
        "# Create Service\r\n",
        "service_name='realtime-wine-inference-service'\r\n",
        "regression_model = Model(ws,'wine_regression_model')\r\n",
        "\r\n",
        "service = Model.deploy(workspace=ws, \r\n",
        "    name=service_name,\r\n",
        "    models=[regression_model],\r\n",
        "    inference_config=inference_config,\r\n",
        "    deployment_config=deployment_config)\r\n",
        "\r\n",
        "service.wait_for_deployment(True)\r\n",
        "print(service.state)\r\n",
        "\r\n",
        "# Write the endpoint for use in testing\r\n",
        "endpoint = service.scoring_uri\r\n",
        "with open('./../../data/endpoint.txt', 'w') as f:\r\n",
        "    f.write(endpoint)\r\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting ./code/deploy/deployment_script.py\n"
          ]
        }
      ],
      "execution_count": 6,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Test Folder"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile './code/test/test_using_sdk.py'\r\n",
        "import pandas as pd \r\n",
        "import json\r\n",
        "from azureml.core import Workspace, Webservice\r\n",
        "\r\n",
        "# Download data from datastore\r\n",
        "ws = Workspace.from_config()\r\n",
        "default_ds = ws.get_default_datastore()\r\n",
        "default_ds.download(\r\n",
        "    target_path='.',\r\n",
        "    prefix='wine-quality/test-data/'\r\n",
        ")\r\n",
        "\r\n",
        "# Read test data\r\n",
        "X_test = pd.read_csv('wine-quality/test-data/X_test.csv',index_col=False).to_numpy().tolist()\r\n",
        "y_test = pd.read_csv('wine-quality/test-data/y_test.csv',index_col=False).to_numpy().tolist()\r\n",
        "\r\n",
        "# Get service\r\n",
        "service_name = 'realtime-wine-inference-service'\r\n",
        "service = Webservice(workspace=ws,name=service_name)\r\n",
        "\r\n",
        "# Convert data to json\r\n",
        "json_data = json.dumps({\"data\": X_test})\r\n",
        "\r\n",
        "# Call the service\r\n",
        "predictions = service.run(input_data = json_data)\r\n",
        "y_pred = json.loads(predictions)\r\n",
        "for x in range(len(y_pred)):\r\n",
        "    print('Wine {} : | Predicted Quality: {} | True Quality: {}'.format(x,y_pred[x],y_test[x]))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting ./code/test/test_using_sdk.py\n"
          ]
        }
      ],
      "execution_count": 7,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile './code/test/test_using_http.py'\r\n",
        "import pandas as pd \r\n",
        "import requests\r\n",
        "import json\r\n",
        "from azureml.core import Workspace, Webservice\r\n",
        "\r\n",
        "\r\n",
        "# Download data from datastore\r\n",
        "ws = Workspace.from_config()\r\n",
        "default_ds = ws.get_default_datastore()\r\n",
        "default_ds.download(\r\n",
        "    target_path='.',\r\n",
        "    prefix='wine-quality/test-data/'\r\n",
        ")\r\n",
        "\r\n",
        "# Read test data\r\n",
        "X_test = pd.read_csv('wine-quality/test-data/X_test.csv',index_col=False).to_numpy().tolist()\r\n",
        "y_test = pd.read_csv('wine-quality/test-data/y_test.csv',index_col=False).to_numpy().tolist()\r\n",
        "\r\n",
        "# Read endpoint\r\n",
        "with open('./../../data/endpoint.txt', 'r') as f:\r\n",
        "    endpoint = f.read()\r\n",
        "\r\n",
        "# Convert data to json\r\n",
        "json_data = json.dumps({\"data\": X_test})\r\n",
        "\r\n",
        "# Set the content type\r\n",
        "headers = { 'Content-Type':'application/json' }\r\n",
        "\r\n",
        "predictions = requests.post(endpoint, json_data, headers = headers)\r\n",
        "print(predictions)\r\n",
        "y_pred = json.loads(predictions.json())\r\n",
        "\r\n",
        "for x in range(len(y_pred)):\r\n",
        "    print('Wine {} : | Predicted Quality: {} | True Quality: {}'.format(x,y_pred[x],y_test[x]))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting ./code/test/test_using_http.py\n"
          ]
        }
      ],
      "execution_count": 8,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3-azureml",
      "language": "python",
      "display_name": "Python 3.6 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python3-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
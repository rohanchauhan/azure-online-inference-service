
from azureml.core import Run, Experiment, Model, Datastore, Workspace
import pandas as pd 
import numpy as np
import joblib
from sklearn.model_selection import train_test_split 
from sklearn import linear_model
from sklearn.metrics import mean_squared_error, r2_score

# Get the experiment run context
run = Run.get_context()
'''
# Get workspace
ws = Workspace.from_config()

# Datastore Params
datastore_name = 'rohands'
storage_account_name = 'rohansa'
container_name ='rohan-blob'
# account_key = Add your account key for storage account

# Get Datastore otherwise create new datastore and register blob storage
if datastore_name in ws.datastores:
    blob_ds = Datastore.get(ws, datastore_name=datastore_name)
else:
    try:
        blob_ds = Datastore.register_azure_blob_container(
            workspace=ws,
            datastore_name=datastore_name,
            account_name=storage_account_name,
            #account_key = account_key
            container_name=container_name
        )
    except Exception as ex:
        print(ex)
print('Connected Datastore')
'''
print('Loading Dataset')
# Load Dataset
wine_quality = pd.read_csv('Users/aishwaryacloud/azure/azure-realtime-inference-service/data/winequality-white.csv',delimiter=';')
X, y = wine_quality.drop('quality', axis=1), wine_quality.quality

# Split data into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)

# Write X_test, y_test for later on testing service
X_test.to_csv('./../../data/X_test.csv',delimiter=';')
y_test.to_csv('./../../data/y_test.csv',delimiter=';')

print('Training Model')
# Train Model
regression_model = linear_model.LinearRegression().fit(X_train,y_train)

# Mean Squared Error and R Squared Score
y_pred = regression_model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print & Log metrics
run.log('Mean Squared Error', mse)
print("Mean Squared Error: {:.2f}".format(mse))

run.log('R Squared', r2)
print("R Squared : {:.2f}".format(r2))

print('Storing Model')
# Store the model
joblib.dump(value=regression_model,
    filename='./../../outputs/regression_model.pkl')

# Complete the run
run.complete()

print('Registering Model')
# Register the model
run.register_model(
    model_path='./../../outputs/regression_model.pkl',
    model_name='wine_regression_model',
    tags={'Training context':'Realtime Inference Pipeline'},
    properties={'MSE': run.get_metrics()['Mean Squared Error'],
    'R Squared': run.get_metrics()['R Squared']})
